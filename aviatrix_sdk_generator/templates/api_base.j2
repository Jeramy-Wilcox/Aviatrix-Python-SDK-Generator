"""The Aviatrix API base module."""
from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

import requests

from .exceptions import AviatrixRESTException
from .response import AviatrixRESTResponse


class APIBase:
    """The Aviatrix APIBase class.

    This class provides the generic api call functions used by all api function calls.
    """

    def __init__(
        self,
        base_url: str,
        session: requests.Session,
        cid: str,
        ):
        """Constructor for Aviatrix Controller class.

        Args:
            base_url (str): Base URL for api calls.
            session (requests.Session): Requests session to make REST api calls.
            cid (str): Customer ID for api calls.

        """
        self.base_url = base_url
        self.session = session
        self.customer_id = cid

    def _avx_api_call(
        self,
        method: str,
        params: Optional[Dict[str, str]] = None,
        data: Optional[Dict[str, str]] = None,
    ) -> Union[str, List, Dict]:
        """Internal function to handle the API call.

        Args:
            method (str): GET or POST HTTP request
            params ([Dict[str, str]], optional): Requests query params. Defaults to None.
            data ([Dict[str, str]], optional): Requests post data. Defaults to None.

        Raises:
            ConnectionError: Connection error.
            HTTPError: An HTTP error occurred.
            URLRequired: A valid URL is required to make a request.
            TooManyRedirects: Too many redirects.
            Timeout: The request timed out.
            RequestException: There was an ambiguous exception.
            AviatrixRESTResponse: The Aviatrix API response or failure reason.

        Returns:
            Response Result: The Aviatrix API response or failure reason.

        """
        params = {} if params is None else {"CID": self.customer_id, **params}
        data = {} if data is None else {"CID": self.customer_id, **data}

        try:
            response = self.session.request(
                method,
                self.base_url,
                params=params,
                data=data,
            )
        except requests.exceptions.ConnectionError as e:
            raise Exception(f"Connection error to {self.base_url}: {e}")
        except requests.exceptions.HTTPError as e:
            raise Exception(f"An HTTP error occurred: {e}")
        except requests.exceptions.URLRequired as e:
            raise Exception(f"A valid URL is required to make a request: {e}")
        except requests.exceptions.TooManyRedirects as e:
            raise Exception(f"Too many redirects: {e}")
        except requests.exceptions.Timeout as e:
            raise Exception(f"The request timed out: {e}")
        except requests.exceptions.RequestException as e:
            raise Exception(f"There was an ambiguous exception: {e}")

        result = AviatrixRESTResponse(response)

        if not result.success:
            raise AviatrixRESTException(result.reason)
        return result.results

    def avx_get(self, **kwargs: Any):
        """Generic GET API call.

        Requires caller to pass in all args except for CID.

        Returns:
            str: Aviatrix API response.
        """
        return self._avx_api_call("GET", params={**kwargs})

    def avx_post(self, **kwargs):
        """Generic POST API call.

        Requires the caller to pass in all args except for CID.

        Returns:
            str: Aviatrix API response.
        """
        return self._avx_api_call("POST", data={**kwargs})
